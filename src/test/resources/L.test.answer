@startuml
state "code block" as 0 {
  state "write" as 1
  1: position: (0, 0)
  state "binary expression" as 2
  2: position: (0, 6)
  2: operator: "+"
  state "function call" as 3
  3: name: "kek"
  3: position: (0, 6)
  2 --> 3: left
  state "function call" as 4
  4: name: "lol"
  4: position: (0, 14)
  2 --> 4: right
  1 --> 2: value
  ||
  state "write" as 5
  5: position: (1, 0)
  state "binary expression" as 6
  6: position: (1, 6)
  6: operator: "=="
  state "binary expression" as 7
  7: position: (1, 6)
  7: operator: "+"
  state "number" as 8
  8: position: (1, 6)
  8: value: 1
  7 --> 8: left
  state "binary expression" as 9
  9: position: (1, 10)
  9: operator: "-"
  state "number" as 10
  10: position: (1, 10)
  10: value: 2
  9 --> 10: left
  state "binary expression" as 11
  11: position: (1, 14)
  11: operator: "*"
  state "number" as 12
  12: position: (1, 14)
  12: value: 3
  11 --> 12: left
  state "binary expression" as 13
  13: position: (1, 18)
  13: operator: "/"
  state "number" as 14
  14: position: (1, 18)
  14: value: 4
  13 --> 14: left
  state "binary expression" as 15
  15: position: (1, 22)
  15: operator: "%"
  state "number" as 16
  16: position: (1, 22)
  16: value: 5
  15 --> 16: left
  state "number" as 17
  17: position: (1, 26)
  17: value: 6
  15 --> 17: right
  13 --> 15: right
  11 --> 13: right
  9 --> 11: right
  7 --> 9: right
  6 --> 7: left
  state "number" as 18
  18: position: (1, 31)
  18: value: 7
  6 --> 18: right
  5 --> 6: value
  ||
  state "write" as 19
  19: position: (2, 0)
  state "binary expression" as 20
  20: position: (2, 6)
  20: operator: "!="
  state "number" as 21
  21: position: (2, 6)
  21: value: 7
  20 --> 21: left
  state "number" as 22
  22: position: (2, 11)
  22: value: 8
  20 --> 22: right
  19 --> 20: value
  ||
  state "write" as 23
  23: position: (3, 0)
  state "binary expression" as 24
  24: position: (3, 6)
  24: operator: ">"
  state "number" as 25
  25: position: (3, 6)
  25: value: 8
  24 --> 25: left
  state "number" as 26
  26: position: (3, 10)
  26: value: 9
  24 --> 26: right
  23 --> 24: value
  ||
  state "write" as 27
  27: position: (4, 0)
  state "binary expression" as 28
  28: position: (4, 6)
  28: operator: ">="
  state "number" as 29
  29: position: (4, 6)
  29: value: 9
  28 --> 29: left
  state "number" as 30
  30: position: (4, 11)
  30: value: 10
  28 --> 30: right
  27 --> 28: value
  ||
  state "write" as 31
  31: position: (5, 0)
  state "binary expression" as 32
  32: position: (5, 6)
  32: operator: "<"
  state "number" as 33
  33: position: (5, 6)
  33: value: 10
  32 --> 33: left
  state "number" as 34
  34: position: (5, 11)
  34: value: 11
  32 --> 34: right
  31 --> 32: value
  ||
  state "write" as 35
  35: position: (6, 0)
  state "binary expression" as 36
  36: position: (6, 6)
  36: operator: "<="
  state "number" as 37
  37: position: (6, 6)
  37: value: 11
  36 --> 37: left
  state "number" as 38
  38: position: (6, 12)
  38: value: 12
  36 --> 38: right
  35 --> 36: value
  ||
  state "write" as 39
  39: position: (7, 0)
  state "binary expression" as 40
  40: position: (7, 6)
  40: operator: "||"
  state "binary expression" as 41
  41: position: (7, 6)
  41: operator: "&&"
  state "number" as 42
  42: position: (7, 6)
  42: value: 12
  41 --> 42: left
  state "number" as 43
  43: position: (7, 12)
  43: value: 13
  41 --> 43: right
  40 --> 41: left
  state "number" as 44
  44: position: (7, 18)
  44: value: 14
  40 --> 44: right
  39 --> 40: value
  ||
  state "variable definition" as 45
  45: name: "x"
  45: position: (8, 0)
  state "number" as 46
  46: position: (8, 8)
  46: value: 1
  45 --> 46: value
  ||
  state "function definition" as 47
  47: name: "y"
  47: position: (9, 0)
  47: z
  state "code block" as 48 {
    state "write" as 49
    49: position: (10, 4)
    state "identifier reference" as 50
    50: name: "x"
    50: position: (10, 10)
    49 --> 50: value
  }
  48: position: (10, 4)
  47 --> 48: body
  ||
  state "function call" as 51
  51: name: "y"
  51: position: (12, 0)
  state "identifier reference" as 52
  52: name: "x"
  52: position: (12, 2)
  51 --> 52: parameter #0
  ||
  state "read" as 53
  53: position: (13, 0)
  53: identifier: "x"
  ||
  state "variable assignment" as 54
  54: name: "x"
  54: position: (14, 0)
  state "number" as 55
  55: position: (14, 4)
  55: value: 2
  54 --> 55: new value
  ||
  state "while" as 56
  56: position: (15, 0)
  state "number" as 57
  57: position: (15, 7)
  57: value: 1
  56 --> 57: condition
  state "code block" as 58 {
    state "function call" as 59
    59: name: "y"
    59: position: (16, 4)
    state "number" as 60
    60: position: (16, 6)
    60: value: 1
    59 --> 60: parameter #0
  }
  58: position: (16, 4)
  56 --> 58: body
  ||
  state "if" as 61
  61: position: (18, 0)
  state "number" as 62
  62: position: (18, 4)
  62: value: 1
  61 --> 62: condition
  state "code block" as 63 {
    state "function call" as 64
    64: name: "y"
    64: position: (19, 4)
    state "number" as 65
    65: position: (19, 6)
    65: value: 2
    64 --> 65: parameter #0
  }
  63: position: (19, 4)
  61 --> 63: then
  ||
  state "if" as 66
  66: position: (21, 0)
  state "number" as 67
  67: position: (21, 4)
  67: value: 1
  66 --> 67: condition
  state "code block" as 68 {
    state "function call" as 69
    69: name: "y"
    69: position: (22, 4)
    state "number" as 70
    70: position: (22, 6)
    70: value: 3
    69 --> 70: parameter #0
  }
  68: position: (22, 4)
  66 --> 68: then
  state "code block" as 71 {
    state "function call" as 72
    72: name: "y"
    72: position: (26, 4)
    state "number" as 73
    73: position: (26, 6)
    73: value: 4
    72 --> 73: parameter #0
  }
  71: position: (26, 4)
  66 --> 71: else
}
0: position: (0, 0)
@enduml